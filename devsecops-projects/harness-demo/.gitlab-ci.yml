stages:
  - security
  - test
  - build
  - deploy

variables:
  IMAGE_NAME: omerdevsecops/devsecops-omerops
  IMAGE_TAG: harness-app-1.0
  GITLEAKS_IMAGE: zricethezav/gitleaks:latest
  GIT_DEPTH: 0                       # scan full history (recommended)

git_leaks:
  stage: security
  image:
    name: $GITLEAKS_IMAGE
    entrypoint: [""]        # keep this if you added it earlier
  variables:
    GIT_DEPTH: 0            # scan full history (optional)
  script:
    - gitleaks version
    - gitleaks detect --source . --redact --no-banner \
        --report-format json --report-path gitleaks-report.json --exit-code 1
  after_script:
    # ensure artifact always exists to avoid "no matching files" warning
    - test -f gitleaks-report.json || echo '{}' > gitleaks-report.json
  artifacts:
    when: always
    paths:
      - gitleaks-report.json


run_tests:
  stage: test
  image: python:3.9-alpine
  before_script:
    - pip install --no-cache-dir flask
  script:
    - python -m unittest discover -s deploy -p "test_*.py"

build_image:
  stage: build
  image: docker:28.3.3-cli
  services:
    - docker:28.3.3-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASS"
  script:
    - docker build -t "$IMAGE_NAME:$IMAGE_TAG" .
    - docker push "$IMAGE_NAME:$IMAGE_TAG"

deploy:
  stage: deploy
  image: alpine:3.20
  script:
    - apk add --no-cache openssh-client
    - chmod 400 "$SSH_KEY"
    - >
      ssh -o StrictHostKeyChecking=no -i "$SSH_KEY"
      "${EC2_USER:-ubuntu}@${EC2_HOST:-ec2-13-223-73-110.compute-1.amazonaws.com}"
      "echo 'âœ… Connected to EC2'; \
       uname -a; \
       docker login -u $REGISTRY_USER -p $REGISTRY_PASS; \
       docker stop harness-demo || true; \
       docker rm harness-demo || true; \
       docker run -d --name harness-demo -p 5000:5000 $IMAGE_NAME:$IMAGE_TAG"
